#include <iostream>
#include <cmath>
using namespace std;

class ZenitGun {
private:
    static double p; // ¬еро€тность попадани€ одного выстрела

public:
    // —татический метод дл€ установки значени€ веро€тности p
    static void setProbability(double probability) {
        p = probability;
    }

    // —татический метод дл€ вычислени€ результата стрельбы
    static int shoot(int n) {
        for (int i = 0; i < n; i++) {
            if ((rand() % 100) < (p * 100)) {
                return 1; // ÷ель уничтожена
            }
        }
        return 0; // —амолет не сбит
    }

    // —татический метод дл€ вычислени€ оценочного значени€ веро€тности поражени€ цели
    static double estimateProbability(int n) {
        return 1 - pow((1 - p), n);
    }
};

// »нициализаци€ статического пол€ класса ZenitGun
double ZenitGun::p = 0;

int main() {
    // ”становка веро€тности попадани€
    ZenitGun::setProbability(0.1); // p = 0.1

    int n = 10; //  оличество выстрелов
    cout << "–езультат стрельбы: " << (ZenitGun::shoot(n) ? "÷ель уничтожена" : "—амолет не сбит") << endl;
    cout << "ќценочна€ веро€тность поражени€ цели: " << ZenitGun::estimateProbability(n) << endl;

    return 0;
}
/*¬ этом коде:

p - статическое поле, представл€ющее веро€тность попадани€ одного выстрела.
setProbability - статический метод дл€ установки значени€ веро€тности p.
shoot - статический метод, который моделирует стрельбу по самолету n раз и возвращает 1, 
если цель уничтожена, и 0, если самолет не сбит.
estimateProbability - статический метод дл€ вычислени€ оценочного значени€ веро€тности поражени€ цели.
ќбратите внимание, что дл€ моделировани€ случайности в методе shoot используетс€ 
функци€ rand(), котора€ генерирует случайное число. ¬ реальных услови€х, вам может
потребоватьс€ использовать более качественный генератор случайных чисел дл€ более точного моделировани€.*/